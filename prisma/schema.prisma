// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ExchangeType {
  CML_IMPORT
  CML_OFFERS
  XLSX_PRODUCTS
  XLSX_PRICES
  XLSX_BALANCE
}

enum ExchangeStatus {
  PENDING
  SUCCESS
  ERROR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  userImage     UserImage?
  accounts      Account[]
  role          Role             @default(USER)
  companies     CompanyMembers[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CompanyRole {
  id            String           @id @default(cuid())
  name          String
  default       Boolean
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  users         CompanyMembers[]
  availableData AvailableData[]
}

model AvailableData {
  stock         Stock       @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId       String
  priceType     PriceType   @relation(fields: [priceTypeId], references: [id], onDelete: Cascade)
  priceTypeId   String
  companyRole   CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId String

  @@id([stockId, priceTypeId, companyRoleId])
}

model Company {
  id            String           @id
  name          String           @unique
  tin           String           @unique
  image         CompanyImage?
  imageId       String
  description   String
  descriptionRu String?
  slogan        String?
  sloganRu      String?
  users         CompanyMembers[]
  invitations   Invitation[]
  products      Product[]
  priceTypes    PriceType[]
  stocks        Stock[]
  companyRoles  CompanyRole[]
  exchangeJobs  ExchangeJob[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model CompanyMembers {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  companyRole   CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Restrict)
  companyRoleId String

  @@id([userId, companyId])
}

model Invitation {
  id            String  @id @default(cuid())
  email         String
  companyRoleId String
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
}

model Product {
  id               Int            @id @default(autoincrement())
  externalId       String?
  productId        String?
  characteristicId String?
  name             String
  number           String
  brand            String
  brandNumber      String
  unit             String
  description      String
  archive          Boolean
  images           ProductImage[]
  company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
  stock            StockBalance[]
  prices           Price[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Stock {
  id           String          @id @default(cuid())
  externalId   String?
  name         String
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  products     StockBalance[]
  companyRoles AvailableData[]
}

model StockBalance {
  stock     Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([stockId, productId])
}

model PriceType {
  id           String          @id @default(cuid())
  externalId   String?
  name         String
  currency     String
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  prices       Price[]
  companyRoles AvailableData[]
}

model Price {
  priceType   PriceType @relation(fields: [priceTypeId], references: [id], onDelete: Cascade)
  priceTypeId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([priceTypeId, productId])
}

model ProductImage {
  id        String  @id
  url       String
  commerceMl Boolean
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model CompanyImage {
  id        String  @id
  url       String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

model UserImage {
  id     String @id
  url    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model ExchangeJob {
  id String @id @default(cuid())
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  path String
  type ExchangeType
  status ExchangeStatus
  errors Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}