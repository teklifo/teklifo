// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  seed            = "prisma/seed.ts"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ExchangeType {
  CML_IMPORT
  CML_OFFERS
  XLSX_PRODUCTS
  XLSX_PRICES
  XLSX_BALANCE
}

enum ExchangeStatus {
  INACTIVE
  PENDING
  SUCCESS
  ERROR
}

enum ExchangeLogStatus {
  SUCCESS
  ERROR
}

enum VatRates {
  NOVAT
  VAT0
  VAT10
  VAT18
  VAT20
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  userImage            UserImage?
  accounts             Account[]
  role                 Role                  @default(USER)
  companies            CompanyMembers[]
  requestsForQuotation RequestForQuotation[]
  quotations           Quotation[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deleted              Boolean               @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CompanyRole {
  id            String           @id @default(cuid())
  name          String
  default       Boolean
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  users         CompanyMembers[]
  availableData AvailableData[]
}

model AvailableData {
  stock         Stock       @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId       String
  priceType     PriceType   @relation(fields: [priceTypeId], references: [id], onDelete: Cascade)
  priceTypeId   String
  companyRole   CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId String

  @@id([stockId, priceTypeId, companyRoleId])
}

model Company {
  id                   String                @id
  name                 String                @unique
  tin                  String                @unique
  image                CompanyImage?
  email                String                @default("")
  phone                String                @default("")
  website              String?
  description          String
  descriptionRu        String?
  slogan               String?
  sloganRu             String?
  users                CompanyMembers[]
  invitations          Invitation[]
  products             Product[]
  priceTypes           PriceType[]
  stocks               Stock[]
  companyRoles         CompanyRole[]
  exchangeJobs         ExchangeJob[]
  requestsForQuotation RequestForQuotation[]
  participation        Participants[]
  sentQuotations       Quotation[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deleted              Boolean               @default(false)
}

model CompanyMembers {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  companyRole   CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Restrict)
  companyRoleId String

  @@id([userId, companyId])
}

model Invitation {
  id            String  @id @default(cuid())
  email         String
  companyRoleId String
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
}

model Product {
  id                   Int                       @id @default(autoincrement())
  externalId           String?
  productId            String?
  characteristicId     String?
  name                 String
  number               String
  brand                String
  brandNumber          String
  unit                 String
  description          String
  archive              Boolean
  images               ProductImage[]
  company              Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  stock                StockBalance[]
  prices               Price[]
  requestsForQuotation RequestForQuotationItem[]
  quotations           QuotationItem[]
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  deleted              Boolean                   @default(false)
}

model Stock {
  id           String          @id @default(cuid())
  externalId   String?
  name         String
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  balance      StockBalance[]
  companyRoles AvailableData[]
}

model StockBalance {
  stock     Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Decimal  @db.Decimal(15, 3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([stockId, productId])
}

model PriceType {
  id           String          @id @default(cuid())
  externalId   String?
  name         String
  currency     String
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  prices       Price[]
  companyRoles AvailableData[]
}

model Price {
  priceType   PriceType @relation(fields: [priceTypeId], references: [id], onDelete: Cascade)
  priceTypeId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  price       Decimal   @db.Decimal(15, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([priceTypeId, productId])
}

model ProductImage {
  id         String  @id
  url        String
  commerceMl Boolean
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

model CompanyImage {
  id        String  @id
  url       String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @unique
}

model UserImage {
  id     String @id
  url    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model ExchangeJob {
  id        String         @id @default(cuid())
  company   Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  name      String
  path      String
  type      ExchangeType
  status    ExchangeStatus
  logs      ExchangeLog[]
  locale    String         @default("en")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ExchangeLog {
  id            String            @id @default(cuid())
  exchangeJob   ExchangeJob       @relation(fields: [exchangeJobId], references: [id], onDelete: Cascade)
  exchangeJobId String
  status        ExchangeLogStatus
  message       String
  createdAt     DateTime          @default(now())
}

model RequestForQuotation {
  versionId       String                    @id @default(cuid())
  id              String                    @default(cuid())
  externalId      String?
  number          Int                       @default(autoincrement())
  company         Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  privateRequest  Boolean                   @default(false)
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  title           String
  currency        String
  endDate         DateTime
  contactPerson   String                    @default("")
  email           String                    @default("")
  phone           String                    @default("")
  description     String
  deliveryAddress String
  deliveryTerms   String
  paymentTerms    String
  items           RequestForQuotationItem[]
  participants    Participants[]
  quotations      Quotation[]
  aiAnalysis      AIQuotationsAnalysis[]
  createdAt       DateTime                  @default(now())
  latestVersion   Boolean                   @default(true)
  deleted         Boolean                   @default(false)
}

model RequestForQuotationItem {
  versionId             String              @id @default(cuid())
  id                    String              @default(cuid())
  externalId            String?
  requestForQuotation   RequestForQuotation @relation(fields: [requestForQuotationId], references: [versionId], onDelete: Cascade)
  requestForQuotationId String
  lineNumber            Int
  productName           String
  product               Product?            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             Int?
  comment               String
  quantity              Decimal             @db.Decimal(15, 3)
  price                 Decimal             @db.Decimal(15, 2)
  deliveryDate          DateTime
  quotationItems        QuotationItem[]
}

model Participants {
  requestForQuotation   RequestForQuotation @relation(fields: [requestForQuotationId], references: [versionId], onDelete: Cascade)
  requestForQuotationId String
  company               Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId             String

  @@id([requestForQuotationId, companyId])
}

model Quotation {
  id            Int                 @id @default(autoincrement())
  externalId    String?
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  rfq           RequestForQuotation @relation(fields: [rfqVersionId], references: [versionId], onDelete: Cascade)
  rfqVersionId  String
  rfqId         String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  currency      String
  contactPerson String              @default("")
  email         String              @default("")
  phone         String              @default("")
  vatIncluded   Boolean             @default(false)
  description   String
  items         QuotationItem[]
  totalAmount   Decimal             @db.Decimal(15, 2)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model QuotationItem {
  id               String                  @id @default(uuid())
  externalId       String?
  quotation        Quotation               @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      Int
  rfqItem          RequestForQuotationItem @relation(fields: [rfqItemVersionId], references: [versionId], onDelete: Cascade)
  rfqItemVersionId String
  rfqItemId        String
  productName      String
  product          Product?                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int?
  quantity         Decimal                 @db.Decimal(15, 3)
  price            Decimal                 @db.Decimal(15, 2)
  amount           Decimal                 @db.Decimal(15, 2)
  vatRate          VatRates
  vatAmount        Decimal                 @db.Decimal(15, 2)
  amountWithVat    Decimal                 @db.Decimal(15, 2)
  deliveryDate     DateTime
  comment          String
  skip             Boolean                 @default(false)
}

model AIQuotationsAnalysis {
  id           String              @id @default(uuid())
  rfq          RequestForQuotation @relation(fields: [rfqVersionId], references: [versionId], onDelete: Cascade)
  rfqVersionId String
  rfqId        String
  message      String
  createdAt    DateTime            @default(now())
}
